# forecasted values usign exponential trend
fit_holt_exp$mean
plot(temp,ylab = "Max Temperatures", xlab = "Year", type = "o", xlim = c(1990, 2021),ylim = c(35,50), main = "Max Annual Temp (Holt)")
lines(fitted(fit_holt_linear), col = "blue", type= "o")
lines(fit_holt_linear$mean,col = "blue", type= "o")
lines(fitted(fit_hold_exp), col = "green", type= "o")
lines(fit_hold_exp$mean,col = "green", type= "o")
# Holt's dampened Linear Trend Model for AUS AIR
fit_holt_linear = holt(temp, alpha = .8, beta = .2, damped = TRUE, initial = "optimal", h = 11)
# Holt dampened Exponential Model
fit_holt_exp = holt(temp, alpha = .8, beta = .2, damped = TRUE, initial = "optimal", exponential = TRUE, h = 11)
# estimated values using linear trend
fitted(fit_holt_linear)
# forecasted values usign linear trend
fit_holt_linear$mean
# estimated values using exponential trend
fitted(fit_holt_exp)
# forecasted values usign exponential trend
fit_holt_exp$mean
plot(temp,ylab = "Max Temperatures", xlab = "Year", type = "o", xlim = c(1990, 2021),ylim = c(35,50), main = "Max Annual Temp (Holt)")
# Plot the fitted value (estimated from triaining data)
lines(fitted(fit_holt_linear), col = "blue", type= "o")
# Plot the forecasts
lines(fit_holt_linear$mean,col = "blue", type= "o")
# Plot the fitted value (estimated from triaining data)
lines(fitted(fit_hold_exp), col = "green", type= "o")
#Plot the forecasts
lines(fit_hold_exp$mean,col = "green", type= "o")
# Plot the fitted value (estimated from triaining data)
lines(fitted(fit_holt_exp), col = "green", type= "o")
#Plot the forecasts
lines(fit_holt_exp$mean,col = "green", type= "o")
# with implicit Test set... it figures out by the time which are training and which are test.
accuracy(fit_holt_linear, maxtemp)
accuracy(fit_holt_exp, maxtemp)
#with explicit Test set ... (same output)
temp_comp_holt = window(maxtemp, start = 1990)
accuracy(fit_holt, temp_comp_holt)
accuracy(fit_hold_exp, temp_comp_holt)
#Add the actual values to visually compare forecasts to actual values
temp_actual = window(maxtemp, start = 1990)
points(temp_actual, type = "o")`
#Add the actual values to visually compare forecasts to actual values
temp_actual = window(maxtemp, start = 1990)
points(temp_actual, type = "o")`
temp_actual = window(maxtemp, start = 1990)
points(temp_actual, type = "o")
legend("topleft", lty=1, col=c(1, "blue", "red", "green"), c("original", expression("Linear"), expression("Exponential")), pch=1)
fit_holt_linear$model[2:3]
legend("topleft", lty=1, col=c(1, "blue", "green"), c("original", expression("Linear"), expression("Exponential")), pch=1)
plot(temp,ylab = "Max Temperatures", xlab = "Year", type = "o", xlim = c(1990, 2021),ylim = c(35,50), main = "Max Annual Temp (Holt)")
# Plot the fitted value (estimated from triaining data)
lines(fitted(fit_holt_linear), col = "blue", type= "o")
# Plot the forecasts
lines(fit_holt_linear$mean,col = "blue", type= "o")
# Plot the fitted value (estimated from triaining data)
lines(fitted(fit_holt_exp), col = "green", type= "o")
#Plot the forecasts
lines(fit_holt_exp$mean,col = "green", type= "o")
legend("topleft", lty=1, col=c(1, "blue", "green"), c("original", expression("Linear"), expression("Exponential")), pch=1)
fit_holt_linear$model[2:3]
fit_holt_exp$model[2:3]
#with explicit Test set ... (same output)
temp_comp_holt = window(maxtemp, start = 1990)
accuracy(fit_holt, temp_comp_holt)
accuracy(fit_hold_exp, temp_comp_holt)
#with explicit Test set ... (same output)
temp_comp_holt = window(maxtemp, start = 1990)
accuracy(fit_holt_linear, temp_comp_holt)
accuracy(fit_holt_exp, temp_comp_holt)
#with explicit Test set ... (same output)
temp_comp_holt = window(maxtemp, start = 1990)
accuracy(fit_holt_linear, temp_comp_holt)
accuracy(fit_holt_exp, temp_comp_holt)
#Add the actual values to visually compare forecasts to actual values
temp_actual = window(maxtemp, start = 1990)
points(temp_actual, type = "o")
help(maxtemp)
library(fpp)
data(ausair)
air = window(ausair, start = 1990, end = 2004)
plot(air,ylab = "Airline Passegners", xlab = "Year", main = "Airline Passengers")
fit1 = ses(air, initial = "simple",alpha = .2,h = 3)
fit2 = ses(air, initial = "simple",alpha = .6, h = 3)
fit3 = ses(air, h = 3) #defaults
accuracy(fit1, ausair)
accuracy(fit2, ausair)
accuracy(fit3, ausair)
plot(air,ylab = "Airline Passegners", xlab = "Year", type = "o", xlim = c(1990, 2008),ylim = c(15,50), main = "Airline Passengers")
#Plot the estimated values from the models .. the "fitted" values are the training values.
lines(fitted(fit1), col = "blue", type = "o")
lines(fitted(fit2), col = "red", type = "o")
lines(fitted(fit3), col = "green", type = "o")
# the  $mean values are the forecasts.
lines(fit1$mean, col = "blue", type = "o")
lines(fit2$mean, col = "red", type = "o")
lines(fit3$mean, col = "green", type = "o")
# These are the actual values!  Compare visually with the forecasts!
air2008 = window(ausair, start = 1990, end = 2007)
points(air2008, type = "o")
# Compare the forecasts with the actual values with various fit metrics.
accuracy(fit1, air2008)
accuracy(fit2, air2008)
accuracy(fit3, air2008)
library(fpp2)
data(maxtemp) #1971-2016
temp <- window(maxtemp, start=1990, end=2010)
plot(temp,ylab = "Max Temperature", xlab = "Year", main = "Max Annual Temp (SES)")
# fitting exponential smoothing forecast model for up to 8 years
temp_fit1 = ses(temp, initial = "optimal",alpha = .2,h = 11)
temp_fit2 = ses(temp, initial = "optimal",alpha = .6, h = 11)
temp_fit3 = ses(temp, h = 11) #defaults
temp_fit1
temp_fit1$model
temp_fit1 = ses(temp, initial = "simple",alpha = .2,h = 11)
temp_fit1$model
data(ausair)
ausair
install.packages(c("bestglm", "gplots", "ResourceSelection", "ROCR"))
install.packages(c("epitools", "samplesizeCMH"))
prop.test(335,411,p=.7,correct=TRUE)  #correct is the continuity correction option
vit.c<-data.frame(Supp=rep(c("Placebo","Vitamin C"),times=c(411,407)),
Cold=rep(c("Yes","No","Yes","No"),times=c(335,76,302,105)))
head(vit.c)
mymat<-table(vit.c)   # or table(vit.c$Supp,vit.c$Cold)
mymat
mymat_2<-matrix(c(76,335,105,302),2,2,byrow=T,dimnames=list(c("Placebo","Vitamin C"),c("No","Yes")))
mymat_2
chisq.test(mymat,correct=TRUE)
prop.table(mymat,margin=1)
prop.test(335,411,p=.7,correct=TRUE)  #correct is the continuity correction option
prop.test(mymat,correct=TRUE)
prop.test(mymat[c(2,1),c(2,1)],correct=TRUE)
library(epitools)
mymat<-matrix(c(76,335,105,302),2,2,byrow=T)
mymat<-matrix(c(76,335,105,302),2,2,byrow=T)
mymat
dimnames(mymat)<-list("Treatment"=c("Plac","Vit C"),"Response"=c("No","Yes"))
dimnames
mymat
mymat<-matrix(c(76,335,105,302),2,2,byrow=T)
mymat
dimnames(mymat)<-list("Treatment"=c("Plac","Vit C"),"Response"=c("No","Yes"))
mymat
#Odds Ratio Intervals
oddsratio.wald(mymat)
#Relative Risk Intervals
riskratio.wald(mymat)
library(epitools)
#Another way to format a count matrix
mymat<-matrix(c(76,335,105,302),2,2,byrow=T)
dimnames(mymat)<-list("Treatment"=c("Plac","Vit C"),"Response"=c("No","Yes"))
mymat
#Odds Ratio Intervals
oddsratio.wald(mymat)
#Relative Risk Intervals
riskratio.wald(mymat)
library(epitools)
#Another way to format a count matrix
mymat<-matrix(c(76,335,105,302),2,2,byrow=T)
mymat
dimnames(mymat)<-list("Treatment"=c("Plac","Vit C"),"Response"=c("No","Yes"))
mymat
#Odds Ratio Intervals
oddsratio.wald(mymat)
mymat
oddsratio.wald(mymat, rev="rows") #
oddsratio.wald(mymat, rev="columns") # results in placebo(N)/vitamin(Y)
oddsratio.wald(mymat) # results in placebo(N)/vitamin(Y)
oddsratio.wald(mymat, rev="rows") # results in placebo(Y)/Vitamin(N)
oddsratio.wald(mymat, rev="columns") # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat)
riskratio.wald(mymat)
riskratio.wald(mymat, rev="rows")
riskratio.wald(mymat, rev="columns")
breast_cancer_df <-matrix(c(330,658,204,386),2,2,byrow=T)
breast_cancer_df
dimnames(breast_cancer_df)<-list("Case Type"=c("< 4 Drinks/week","> 4 Drink/week"),"Response"=c("Cases","Controls"))
breast_cancer_df
oddsratio.wald(breast_cancer_df) # results in placebo(N)/vitamin(Y)
oddsratio.wald(breast_cancer_df, rev="rows") # results in placebo(Y)/Vitamin(N)
oddsratio.wald(breast_cancer_df, rev="columns") # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat)
riskratio.wald(mymat, rev="rows")
riskratio.wald(mymat, rev="columns")
oddsratio.wald(breast_cancer_df, rev="rows") # results in placebo(Y)/Vitamin(N)
oddsratio.wald(breast_cancer_df, rev="columns") # results in placebo(N)/vitamin(Y)
oddsratio.wald(breast_cancer_df) # results in placebo(N)/vitamin(Y)
oddsratio.wald(breast_cancer_df, rev="rows") # results in placebo(Y)/Vitamin(N)
oddsratio.wald(breast_cancer_df, rev="columns") # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat, rev="columns")
riskratio.wald(mymat)
riskratio.wald(mymat, rev="rows")
riskratio.wald(mymat, rev="columns")
#Relative Risk Intervals
riskratio.wald(breast_cancer_df)
riskratio.wald(breast_cancer_df, rev="rows")
riskratio.wald(breast_cancer_df, rev="columns")
oddsratio.wald(breast_cancer_df) # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat, rev="columns")
install.packages("aws.s3")
library(tidyr)
library(dplyr)
library(ggplot2)
wd <- "C:/Users/David/Google Drive/Code & Programming/GitHub/MSDS_6372_Applied-Statistics_Project_2/UCI_Bank_Marketing_Classification_Model/Data Files/bank-additional-full.csv"
setwd(wd)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
setwd("C:/Users/David/Google Drive/Code & Programming/GitHub/MSDS_6372_Applied-Statistics_Project_2/UCI_Bank_Marketing_Classification_Model/Data Files/")
df <- read.csv("bank-additional-full.csv", header=TRUE, sep=";")
head(df, 5)
df <- df %>% rename(clnt.subcr = `y`)
library(naniar)
vis_miss(df) + xlab("Data Columns")
df$ID <- seq.int(nrow(df))
df <- df %>% select(ID, everything())
# converting all "unknown" values back to NA
df_stg <- df
df_stg[df_stg=="unknown"] <- NA
# filtering out all NA values from dataset
df_stg <- df_stg %>% filter(!is.na(job) & !is.na(marital) & !is.na(education) & !is.na(default)
& !is.na(housing) & !is.na(loan) & !is.na(contact))
# checking all missing variables filtered out
vis_miss(df_stg) + xlab("Data Columns")
# validating reduction in row totals after filtering missing data
nrow(df)
nrow(df_stg)
# new df storing ID and all converted categorical variables into factor types
df_cat <- df_stg
for(i in cat_types){
df_cat[, i] <- factor(df_cat[,i])
x <- paste(colnames(df_cat[i]),"desc", sep="_")
colnames(df_cat)[i] <- paste(x)
}
cat_types <- c(3,4,5,6,7,8,9,10,11,16,22)
# new df storing ID and all converted categorical variables into factor types
df_cat <- df_stg
for(i in cat_types){
df_cat[, i] <- factor(df_cat[,i])
x <- paste(colnames(df_cat[i]),"desc", sep="_")
colnames(df_cat)[i] <- paste(x)
}
# create new df containing ID and all converted categorical variables into numerical types
df_cat_num <- df_stg
for(i in cat_types){
df_cat_num[, i] <- as.numeric(factor(df_cat_num[,i]))
x <- paste(colnames(df_cat_num[i]),"ID", sep="_")
colnames(df_cat_num)[i] <- paste(x)
}
cat_columns <- c(1,3,4,5,6,7,8,9,10,11,16,22)
# 2 dfs, 1 storing all the IDs (df_cat_num_short), the other storying all the factored "descriptions" (df_cat_short)
df_cat_num_short <- data.frame(df_cat_num[, cat_columns])
df_cat_short <- data.frame(df_cat[, cat_columns])
# storying all numerical data into temp df excluding categorical types
df_num_only <- df[, -cat_types]
# joining the categorical factors (desc) with it's numerical types (IDs) then re-ordering
df_cat_merge <- merge(x=df_cat_num_short, y=df_cat_short, by="ID", all.x=TRUE)
df_cat_merge <- df_cat_merge[c(1,2,13,3,14,4,15,5,16,6,17,7,18,8,19,9,20,10,21,11,22,12,23)]
# joining all numerical with categorical data together as final df
df_final <- merge(x=df_cat_merge, y=df_num_only, by="ID", all.x=TRUE)
head(df_final, 1)
str(df_final)
table(df_stg$clnt.subcr)
library(GGally)
summary(df_num_only)
set.seed(27)
splitPerc = .70
df_index = sample(1:dim(df_final)[1],round(splitPerc * dim(df_final)[1]))
df_train = df_final[df_index,]
df_test = df_final[-df_index,]
table(df_final$clnt.subcr_ID)
table(df_train$clnt.subcr_ID)
table(df_test$clnt.subcr_ID)
library(caret)
set.seed(27)
df_train_dwnsmpled <- downSample(x = df_train,y = df_train$clnt.subcr_ID)
df_train_dwnsmpled <- downSample(x = df_train,y = df_train$clnt.subcr_desc)
table(df_train_dwnsmpled$clnt.subcr_ID)
table(df_final$clnt.subcr_ID)
table(df_train$clnt.subcr_ID)
table(df_test$clnt.subcr_ID)
table(df_train_dwnsmpled$clnt.subcr_ID)
str(df_train_dwnsmpled[,34])
str(df_train_dwnsmpled
)
str(df_train_dwnsmpled[,35])
corr_matrix_num <- df_train_dwnsmpled[,c(20:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
str(df_train_dwnsmpled[,33])
str(df_train_dwnsmpled[,34])
str(df_train_dwnsmpled[,20])
str(df_train_dwnsmpled)
str(df_train_dwnsmpled[,20:33])
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
library(corrplot)
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
# is there a relationship between # of contacts made and the month or week?
library(stringr)
df_train_dwnsmpled$month_cap <- str_to_title(df_train_dwnsmpled$month_desc)
df_train_dwnsmpled$month_cap <- factor(df_train_dwnsmpled$month_cap, levels=month.abb)
df_train_dwnsmpled %>% ggplot(aes(x=month_cap, y=campaign,fill=day_of_week_desc)) + geom_bar(stat="identity") + scale_x_discrete(limits=month.abb) + labs(title="# of Campaigns per Month by Day", x="Month", y="# of Campaigns", fill="Day of Week")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate)) + geom_point()
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=nr.employed, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
str(df_final_dwnsmpled)
str(df_train_dwnsmpled)
manova_test <- manova(clnt.sbcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
manova_test <- manova(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
manova_test <- anova(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
manova_test <- aov(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
aov_test <- aov(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
summary.aov(aov_test)
table(df_final$clnt.subcr_ID)
df_train_dwnsmpled %>% count(df_train_dwnsmpled$euribor3m)
df_train_dwnsmpled %>% count(df_train_dwnsmpled$emp.var.rate)
View(df_train_dwnsmpled)
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
num_plot_val <- c(24:33)
num_types_par <- par(mfrow=c(3,3))
num_types_par <- par(mfrow=c(3,3))
for(i in num_plot_val){
col.name <- colnames(df_final[i])
plot(df_final[,i],df_final$clnt.subcr_desc, xlab=col.name, ylab="Attrition")
}
par(num_types_par)
num_types_par <- par(mfrow=c(3,3))
for(i in num_plot_val){
col.name <- colnames(df_final[i])
plot(df_final[,i],df_final$clnt.subcr_desc, xlab=col.name, ylab="Attrition")
}
par(num_types_par)
num_plot_val <- c(24:33)
num_types_par <- par(mfrow=c(3,3))
for(i in num_plot_val){
col.name <- colnames(df_train_dwnsmpled[i])
plot(df_train_dwnsmpled[,i],df_train_dwnsmpled$clnt.subcr_desc, xlab=col.name, ylab="Clnt.Subcr")
}
par(num_types_par)
for(i in num_plot_val){
col.name <- colnames(df_train_dwnsmpled[i])
plot(df_train_dwnsmpled[,i],df_train_dwnsmpled$clnt.subcr_ID, xlab=col.name, ylab="Clnt.Subcr")
}
par(num_types_par)
par(num_types_par)
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=job_desc, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point()
df_train_dwnsmpled %>% ggplot(aes(x=job_desc, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter()
# observing Eurobo3m vs Emp.var.rate
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=job_desc, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_boxplot()
df_train_dwnsmpled %>% count(df_train_dwnsmpled$default_desc)
# creating correlation matrix  of numerical datatypes
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
df_train_dwnsmpled %>% count(df_train_dwnsmpled$nr.employed)
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_jitter() +geom_smooth(method="lm")
hist(df_train_dwnsmpled$euribor3m)
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_histogram()
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_histogram(aes(y=..density..)
)
# distributino of eurobor3m
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_histogram(aes(y=..density..))
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_density()
# creating correlation matrix  of numerical datatypes
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, y=nr.employed, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
# creating correlation matrix  of numerical datatypes
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
# creating correlation matrix  of numerical datatypes
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, fill=clnt.subcr_desc)) + geom_density()
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, fill=clnt.subcr_desc)) + geom_histogram()
aov_test <- aov(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
summary.aov(aov_test)
df_train_dwnsmpled %>% ggplot(aes(x=duration, y=clnt.subcr_desc)) + geom_boxplot()
df_train_dwnsmpled %>% ggplot(aes(x=clnt.subcr_desc, y=duration)) + geom_boxplot()
model_df <- df_train_dwnsmpled[, -exclude_columns]
exclude_columns <- c(8,9,12,13,18,19)
model_df <- df_train_dwnsmpled[, -exclude_columns]
str(model_df)
full_model <- lm(clnt.subscr_ID~., data=model_df)
full_model <- lm(clnt.subcr_ID~., data=model_df)
# Running stepwise
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
library(MASS)
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step.model)
summary(step_model)
str(model_df)
str(df_train_dwnsmpled)
str(df_train)
str(df_train_dwnsmpled)
exclude_columns <- c(8,9,12,13,18,19,34,35)
model_df <- df_train_dwnsmpled[, -exclude_columns]
full_model <- lm(clnt.subcr_ID~., data=model_df)
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step_model)
exclude_columns <- c(1,3,5,7,8,9,12,13,15,17,18,19,21,23,34,35)
model_df <- df_train_dwnsmpled[, -exclude_columns]
full_model <- lm(clnt.subcr_ID~., data=model_df)
# Running stepwise
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step_model)
fwd_model <- stepAIC(full_model, direction="forward", trace=FALSE)
summary(fwd_model)
bck_model <- stepAIC(full_model, direction="backward", trace=FALSE)
summary(bck_model)
exp(cbind("Odds ratio" = coef(step_model), confint.default(step_model, level = 0.95)))
summary(step_model)
coef(step_model, 4)
summary(step_model)
step_mode$results
step_model$results
fwd_model <- stepAIC(full_model, direction="forward", trace=FALSE)
summary(fwd_model)
bck_model <- stepAIC(full_model, direction="backward", trace=FALSE)
summary(bck_model)
summary(fwd_model)
summary(step_model)
exclude_columns_all <- c(1,3,5,7,9,11,13,15,17,19, 42,45)
model_df_raw <- df_train_dwnsmpled[, -exclude_columns_all]
raw_model <- lm(clnt.subcr_ID~., data=model_df_raw)
summary(raw_model)
str(df_train_dwnsmpled)
exclude_columns_all <- c(1,3,5,7,9,11,13,15,17,19,21,23,34,35)
model_df_raw <- df_train_dwnsmpled[, -exclude_columns_all]
raw_model <- lm(clnt.subcr_ID~., data=model_df_raw)
step_model <- stepAIC(raw_model, direction="both", trace=FALSE)
summary(raw_model)
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
step_model <- stepAIC(raw_model, direction="both", trace=FALSE)
summary(step_model)
summary(raw_model)
table(df_test$clnt.subcr_ID)
df_test_dwnsmpled <- downSample(x = df_test,y = df_test$clnt.subcr_desc)
table(df_train_dwnsmpled$clnt.subcr_ID)
table(df_test_dwnsmpled$clnt.subcr_ID)
library(glmnet)
logit <- model.matrix(clnt.subcr_ID~., data=model_df)
logit_model <- model.matrix(clnt.subcr_ID~., family="binomial", data=model_df)
summary(logit_model)
logit_model <- glm(clnt.subcr_ID~., family="binomial", data=model_df)
str(model_df)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=model_df)
exclude_columns_EDA <- c(1,5,7,8,9,12,13,15,17,18,19,21,23,34,35)
model_df <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model <- lm(clnt.subcr_ID~., data=model_df)
exclude_columns_EDA <- c(1,2,5,7,8,9,12,13,15,17,18,19,21,23,34,35)
model_df <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model <- lm(clnt.subcr_ID~., data=model_df)
full_model_df <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model <- lm(clnt.subcr_ID~., data=full_model_df)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model)
logit_model <- glm(full_model, family="binomial", data=full_model)
logit_model <- glm(full_model, family="binomial", data=full_model)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_df)
str(full_model_df)
exclude_columns_EDA <- c(1,3,,5,7,8,9,12,13,15,17,18,19,21,22,34,35)
exclude_columns_EDA <- c(1,3,5,7,8,9,12,13,15,17,18,19,21,22,34,35)
full_model_df <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model <- lm(clnt.subcr_ID~., data=full_model_df)
full_model_df <- df_train_dwnsmpled[, -exclude_columns_EDA]
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_df)
summary(logit_model)
logit_pred <- predict(logit_model, new=data=df_test_dwnsmpled, type="response")
logit_pred <- predict(logit_model, newdata=df_test_dwnsmpled, type="response")
summary(logit_pred)
str(logit_pred)
confusionMatrix(df_test_dwnsmpled$clnt.subcr_desc)
confusionMatrix(df_test_dwnsmpled$clnt.subcr_desc, logit_pred)
logit_pred <- predict(logit_model, newdata=df_test_dwnsmpled, type="response")
confusionMatrix(df_test_dwnsmpled$clnt.subcr_desc, logit_pred)
confusionMatrix(df_train_dwnsmpled$clnt.subcr_desc, logit_pred)
str(df_test_dwnsmpled)
ncol(df_train_dwnsmpled)
ncol(df_test_dwnsmpled)
str(df_train_dwnsmpled)
str(df_test_dwnsmpled)
df_train_dwnsmpled$month_desc <- str_to_title(df_train_dwnsmpled$month_desc)
df_train_dwnsmpled$month_desc <- factor(df_train_dwnsmpled$month_cap, levels=month.abb)
str(df_train_dwnsmpled)
df_train_dwnsmpled %>% ggplot(aes(x=month_desc, y=campaign,fill=day_of_week_desc)) + geom_bar(stat="identity") + scale_x_discrete(limits=month.abb) + labs(title="# of Campaigns per Month by Day", x="Month", y="# of Campaigns", fill="Day of Week")
