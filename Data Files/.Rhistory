}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
# App title ----
titlePanel("Beer & Brewery Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("dataset", "Choose a dataset:", choices = c("Beer", "Brewery", "Beer & Brewery")),
numericInput("obs", "Number of Observations:", 3, min=1, max=100),
selectInput("select", "For Beers, ABV or IBU:", choices = c("ABV", "IBU")),
radioButtons("plot", "Select Plot Type:", choices=list("Histogram"=1, "Boxplot"=2, "Scatterplot"=3), selected=1),
checkboxInput("lm", "Add Linear Regression Overlay", value=TRUE),
selectInput("state", "Filter State:", choices=unique(beer_brewery_df$State))
),
# Main panel for displaying outputs ----
mainPanel(
h4("Observations"),
tableOutput("view"),
plotOutput(outputId = "plot1"),
plotOutput(outputId = "plot2"),
plotOutput(outputId = "plot3")
)
)
)
server <- function(input, output){
datasetInput <- reactive({
switch(input$dataset,
"Beer" = beer_df,
"Brewery" = brew_df,
"Beer & Brewery" = beer_brewery_df)
})
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
a
state_filter <- reactive({
beer_brewery_df %>% filter(beer_brewery_df$State==input$state)
})
output$plot1 <- renderPlot({
if(input$select=="ABV" & input$plot==1)
{
x <- beer_df$ABV
hist(beer_df, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer ABV")
}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(ggthemes)
library(dplyr)
library(stringr)
library(tidyverse)
library(rmarkdown)
setwd("C:/Users/David/Google Drive/Masters/Summer 2020/DS 6306 - Doing Data Science/Unit 12/")
beer_df <- read.csv("Beers.csv")
brew_df <- read.csv("Breweries.csv")
# beer_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Beers.csv")
# brew_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Breweries.csv")
# left join brew into beer based on brew_id, then renaming and ordering columns
beer_brewery_df <- merge(x=beer_df, y=brew_df, by.x="Brewery_id", by.y="Brew_ID", all.x=TRUE) %>%
plyr::rename(c("Ounces"="Oz", "Brewery_id"="Brewery_ID", "Name.x"="Beer_Name","Name.y"="Brewery_Name"))
# reording the columns
beer_brewery_df <- beer_brewery_df[c(1,8,3,2,9,10,4,5,6,7)]
# trimming leading and tailing spaces
beer_brewery_df$State <- str_trim(beer_brewery_df$State,side="both")
# string for all states
states <- as.list(beer_brewery_df %>% group_by(State) %>% summarise(unq_states = n_distinct(State)) %>% select(State))
# Chunk 3
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Beer & Brewery Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("dataset", "Choose a dataset:", choices = c("Beer", "Brewery", "Beer & Brewery")),
numericInput("obs", "Number of Observations:", 3, min=1, max=100),
selectInput("select", "For Beers, ABV or IBU:", choices = c("ABV", "IBU")),
radioButtons("plot", "Select Plot Type:", choices=list("Histogram"=1, "Boxplot"=2, "Scatterplot"=3), selected=1),
checkboxInput("lm", "Add Linear Regression Overlay", value=TRUE),
selectInput("state", "Filter State:", choices=unique(beer_brewery_df$State))
),
# Main panel for displaying outputs ----
mainPanel(
h4("Observations"),
tableOutput("view"),
plotOutput(outputId = "plot1"),
plotOutput(outputId = "plot2"),
plotOutput(outputId = "plot3")
)
)
)
server <- function(input, output){
datasetInput <- reactive({
switch(input$dataset,
"Beer" = beer_df,
"Brewery" = brew_df,
"Beer & Brewery" = beer_brewery_df)
})
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
a
state_filter <- reactive({
beer_brewery_df %>% filter(beer_brewery_df$State==input$state)
})
output$plot1 <- renderPlot({
if(input$select=="ABV" & input$plot==1)
{
x <- beer_df$ABV
hist(beer_df, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer ABV")
}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Beer & Brewery Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("dataset", "Choose a dataset:", choices = c("Beer", "Brewery", "Beer & Brewery")),
numericInput("obs", "Number of Observations:", 3, min=1, max=100),
selectInput("select", "For Beers, ABV or IBU:", choices = c("ABV", "IBU")),
radioButtons("plot", "Select Plot Type:", choices=list("Histogram"=1, "Boxplot"=2, "Scatterplot"=3), selected=1),
checkboxInput("lm", "Add Linear Regression Overlay", value=TRUE),
selectInput("state", "Filter State:", choices=unique(beer_brewery_df$State))
),
# Main panel for displaying outputs ----
mainPanel(
h4("Observations"),
tableOutput("view"),
plotOutput(outputId = "plot1"),
plotOutput(outputId = "plot2"),
plotOutput(outputId = "plot3")
)
)
)
server <- function(input, output){
datasetInput <- reactive({
switch(input$dataset,
"Beer" = beer_df,
"Brewery" = brew_df,
"Beer & Brewery" = beer_brewery_df)
})
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
a
state_filter <- reactive({
beer_brewery_df %>% filter(beer_brewery_df$State==input$state)
})
output$plot1 <- renderPlot({
if(input$select=="ABV" & input$plot==1)
{
x <- beer_df$ABV
hist(beer_df, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer ABV")
}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(stringr)
library(tidyverse)
library(rmarkdown)
setwd("C:/Users/David/Google Drive/Masters/Summer 2020/DS 6306 - Doing Data Science/Unit 12/")
beer_df <- read.csv("Beers.csv")
brew_df <- read.csv("Breweries.csv")
# beer_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Beers.csv")
# brew_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Breweries.csv")
# left join brew into beer based on brew_id, then renaming and ordering columns
beer_brewery_df <- merge(x=beer_df, y=brew_df, by.x="Brewery_id", by.y="Brew_ID", all.x=TRUE) %>%
plyr::rename(c("Ounces"="Oz", "Brewery_id"="Brewery_ID", "Name.x"="Beer_Name","Name.y"="Brewery_Name"))
# reording the columns
beer_brewery_df <- beer_brewery_df[c(1,8,3,2,9,10,4,5,6,7)]
# trimming leading and tailing spaces
beer_brewery_df$State <- str_trim(beer_brewery_df$State,side="both")
# string for all states
states <- as.list(beer_brewery_df %>% group_by(State) %>% summarise(unq_states = n_distinct(State)) %>% select(State))
```
```{r,echo=FALSE}
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Beer & Brewery Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("dataset", "Choose a dataset:", choices = c("Beer", "Brewery", "Beer & Brewery")),
numericInput("obs", "Number of Observations:", 3, min=1, max=100),
selectInput("select", "For Beers, ABV or IBU:", choices = c("ABV", "IBU")),
radioButtons("plot", "Select Plot Type:", choices=list("Histogram"=1, "Boxplot"=2, "Scatterplot"=3), selected=1),
checkboxInput("lm", "Add Linear Regression Overlay", value=TRUE),
selectInput("state", "Filter State:", choices=unique(beer_brewery_df$State))
),
# Main panel for displaying outputs ----
mainPanel(
h4("Observations"),
tableOutput("view"),
plotOutput(outputId = "plot1"),
plotOutput(outputId = "plot2"),
plotOutput(outputId = "plot3")
)
)
)
server <- function(input, output){
datasetInput <- reactive({
switch(input$dataset,
"Beer" = beer_df,
"Brewery" = brew_df,
"Beer & Brewery" = beer_brewery_df)
})
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
a
state_filter <- reactive({
beer_brewery_df %>% filter(beer_brewery_df$State==input$state)
})
output$plot1 <- renderPlot({
if(input$select=="ABV" & input$plot==1)
{
x <- beer_df$ABV
hist(beer_df, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer ABV")
}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(stringr)
library(tidyverse)
library(rmarkdown)
setwd("C:/Users/David/Google Drive/Masters/Summer 2020/DS 6306 - Doing Data Science/Unit 12/")
beer_df <- read.csv("Beers.csv")
brew_df <- read.csv("Breweries.csv")
# beer_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Beers.csv")
# brew_df <- read.csv("C:/Users/Chee/Google Drive/Masters/Data Files/Breweries.csv")
# left join brew into beer based on brew_id, then renaming and ordering columns
beer_brewery_df <- merge(x=beer_df, y=brew_df, by.x="Brewery_id", by.y="Brew_ID", all.x=TRUE) %>%
plyr::rename(c("Ounces"="Oz", "Brewery_id"="Brewery_ID", "Name.x"="Beer_Name","Name.y"="Brewery_Name"))
# reording the columns
beer_brewery_df <- beer_brewery_df[c(1,8,3,2,9,10,4,5,6,7)]
# trimming leading and tailing spaces
beer_brewery_df$State <- str_trim(beer_brewery_df$State,side="both")
# string for all states
states <- as.list(beer_brewery_df %>% group_by(State) %>% summarise(unq_states = n_distinct(State)) %>% select(State))
```
```{r,echo=FALSE}
library(shiny)
ui <- fluidPage(
# App title ----
titlePanel("Beer & Brewery Data"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput("dataset", "Choose a dataset:", choices = c("Beer", "Brewery", "Beer & Brewery")),
numericInput("obs", "Number of Observations:", 3, min=1, max=100),
selectInput("select", "For Beers, ABV or IBU:", choices = c("ABV", "IBU")),
radioButtons("plot", "Select Plot Type:", choices=list("Histogram"=1, "Boxplot"=2, "Scatterplot"=3), selected=1),
checkboxInput("lm", "Add Linear Regression Overlay", value=TRUE),
selectInput("state", "Filter State:", choices=unique(beer_brewery_df$State))
),
# Main panel for displaying outputs ----
mainPanel(
h4("Observations"),
tableOutput("view"),
plotOutput(outputId = "plot1"),
plotOutput(outputId = "plot2"),
plotOutput(outputId = "plot3")
)
)
)
server <- function(input, output){
datasetInput <- reactive({
switch(input$dataset,
"Beer" = beer_df,
"Brewery" = brew_df,
"Beer & Brewery" = beer_brewery_df)
})
output$view <- renderTable({
head(datasetInput(), n=input$obs)
})
a
state_filter <- reactive({
beer_brewery_df %>% filter(beer_brewery_df$State==input$state)
})
output$plot1 <- renderPlot({
if(input$select=="ABV" & input$plot==1)
{
x <- beer_df$ABV
hist(beer_df, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer ABV")
}
if(input$select=="ABV" & input$plot==2)
{
x <- beer_df$ABV
boxplot(x)
}
if(input$select=="ABV" & input$plot==3)
{
x <- beer_df
# plot(beer_df$ABV, beer_df$IBU)
ggplot(data=beer_df, aes(x=beer_df$ABV, y=beer_df$IBU))+geom_point()
}
# # adding regression line
# if(input$select=="ABV" & input$plot==3)
# {
#   x <- beer_df
#   ggplot(x, aes(x$ABV, x$IBU))+geom_point()
# }
if(input$select=="IBU" & input$plot==1)
{
x <- beer_df$IBU
hist(x, col="#75AADB", border="white", xlab="ABV", main="Histogram of Beer IBU")
}
if(input$select=="IBU" & input$plot==2)
{
x <- beer_df$IBU
boxplot(x)
}
if(input$select=="IBU" & input$plot==3)
{
x <- beer_df[,3:4]
plot(x)
}
})
}
shinyApp(ui, server)
setwd("C:/Users/David/Google Drive/Masters/Summer 2020/DS 6372 - Applied Statistics Inference & Modeling/Project 2/Data Files/bank-additional-full.csv")
bank_df <- read.csv("bank-additional-full.csv")
setwd("C:/Users/David/Google Drive/Masters/Summer 2020/DS 6372 - Applied Statistics Inference & Modeling/Project 2/Data Files/")
bank_df <- read.csv("bank-additional-full.csv")
View(bank_df)
head(bank_df)
bank_df <- read.csv("bank-additional-full.csv", header=TRUE, sep=";")
View(bank_df)
View(bank_df)
