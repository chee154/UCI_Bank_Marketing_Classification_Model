oddsratio.wald(breast_cancer_df, rev="rows") # results in placebo(Y)/Vitamin(N)
oddsratio.wald(breast_cancer_df, rev="columns") # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat, rev="columns")
riskratio.wald(mymat)
riskratio.wald(mymat, rev="rows")
riskratio.wald(mymat, rev="columns")
#Relative Risk Intervals
riskratio.wald(breast_cancer_df)
riskratio.wald(breast_cancer_df, rev="rows")
riskratio.wald(breast_cancer_df, rev="columns")
oddsratio.wald(breast_cancer_df) # results in placebo(N)/vitamin(Y)
riskratio.wald(mymat, rev="columns")
install.packages("aws.s3")
library(tidyr)
library(dplyr)
library(ggplot2)
wd <- "C:/Users/David/Google Drive/Code & Programming/GitHub/MSDS_6372_Applied-Statistics_Project_2/UCI_Bank_Marketing_Classification_Model/Data Files/bank-additional-full.csv"
setwd(wd)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
setwd("C:/Users/David/Google Drive/Code & Programming/GitHub/MSDS_6372_Applied-Statistics_Project_2/UCI_Bank_Marketing_Classification_Model/Data Files/")
df <- read.csv("bank-additional-full.csv", header=TRUE, sep=";")
str(df)
df <- df %>% rename(clnt.subcr = `y`)
library(naniar)
# adding sequential ID column to all rows
df$ID <- seq.int(nrow(df))
df <- df %>% select(ID, everything())
# finding which columns in df are categorical
cat_class <- as.data.frame(sapply(df, class))
cat_class
# exploring the unique data values for all categorical variables
cat_types <- c(3,4,5,6,7,8,9,10,11,16,22)
for(i in cat_types){
print(colnames(df[i]))
print(df %>% count(df[,i]))
}
# converting all "unknown" values back to NA
df_stg <- df
df_stg[df_stg=="unknown"] <- NA
vis_miss(df_stg, warn_large_data = FALSE) + xlab("Data Columns")
# filtering out all NA values from dataset
df_stg <- df_stg %>% filter(!is.na(job) & !is.na(marital) & !is.na(education) & !is.na(default)
& !is.na(housing) & !is.na(loan) & !is.na(contact))
# new df storing ID and all converted categorical variables into factor types
df_cat <- df_stg
for(i in cat_types){
df_cat[, i] <- factor(df_cat[,i])
x <- paste(colnames(df_cat[i]),"desc", sep="_")
colnames(df_cat)[i] <- paste(x)
}
# create new df containing ID and all converted categorical variables into numerical types
df_cat_num <- df_stg
for(i in cat_types){
df_cat_num[, i] <- as.numeric(factor(df_cat_num[,i]))
x <- paste(colnames(df_cat_num[i]),"ID", sep="_")
colnames(df_cat_num)[i] <- paste(x)
}
cat_columns <- c(1,3,4,5,6,7,8,9,10,11,16,22)
# 2 dfs, 1 storing all the IDs (df_cat_num_short), the other storying all the factored "descriptions" (df_cat_short)
df_cat_num_short <- data.frame(df_cat_num[, cat_columns])
df_cat_short <- data.frame(df_cat[, cat_columns])
# storying all numerical data into temp df excluding categorical types
df_num_only <- df[, -cat_types]
df_cat_merge <- merge(x=df_cat_num_short, y=df_cat_short, by="ID", all.x=TRUE)
df_cat_merge <- df_cat_merge[c(1,2,13,3,14,4,15,5,16,6,17,7,18,8,19,9,20,10,21,11,22,12,23)]
df_final <- merge(x=df_cat_merge, y=df_num_only, by="ID", all.x=TRUE)
head(df_final, 1)
nrow(df) #raw
nrow(df_stg) #filterd NA
nrow(df_final) #organized, should match df_stg
set.seed(27)
splitPerc = .70
df_index = sample(1:dim(df_final)[1],round(splitPerc * dim(df_final)[1]))
df_train = df_final[df_index,]
df_test = df_final[-df_index,]
library(caret)
set.seed(27)
df_train_dwnsmpled <- downSample(x = df_train,y = df_train$clnt.subcr_desc)
df_test_dwnsmpled <- downSample(x = df_test,y = df_test$clnt.subcr_desc)
table(df_final$clnt.subcr_ID) #cleaned table
table(df_train_dwnsmpled$clnt.subcr_ID) #train downsampled
table(df_test_dwnsmpled$clnt.subcr_ID) #test downsampled
table(df_train$clnt.subcr_ID) #train nondownsampled
table(df_test$clnt.subcr_ID) #test nondownsample
library(GGally)
library(corrplot)
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
# conducting ANOVA on categorical types to observe differences between variables and our response factors
aov_test <- aov(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
summary.aov(aov_test)
library(stringr)
df_train_dwnsmpled$month_desc <- str_to_title(df_train_dwnsmpled$month_desc)
df_train_dwnsmpled$month_desc <- factor(df_train_dwnsmpled$month_cap, levels=month.abb)
df_train_dwnsmpled$month_desc <- str_to_title(df_train_dwnsmpled$month_desc)
df_train_dwnsmpled$month_desc <- factor(df_train_dwnsmpled$month_cap, levels=month.abb)
df_train_dwnsmpled$month_desc <- factor(df_train_dwnsmpled$month_desc, levels=month.abb)
df_train_dwnsmpled %>% ggplot(aes(x=month_desc, y=campaign,fill=day_of_week_desc)) + geom_bar(stat="identity") + scale_x_discrete(limits=month.abb) + labs(title="# of Campaigns per Month by Day", x="Month", y="# of Campaigns", fill="Day of Week")
# job_desc vs emp.var.rate
df_train_dwnsmpled %>% ggplot(aes(x=clnt.subcr_desc, y=duration)) + geom_boxplot()
library(MASS)
exclude_columns_EDA <- c(1,3,5,7,8,9,12,13,15,17,18,19,21,34)
# removing the EDA based attributes to both the downsampled test and train set
full_model_train <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model_test <- df_test_dwnsmpled[, -exclude_columns_EDA]
#validating column consistency
ncol(full_model_train)
ncol(full_model_test)
nrow(full_model_train)
nrow(full_model_test)
full_model <- lm(clnt.subcr_ID~., data=full_model_train[, -10])
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step_model)
str(df_train_dwnsmpled)
aov_test <- aov(clnt.subcr_ID~job_ID+marital_ID+education_ID+default_ID+loan_ID+contact_ID+month_ID+poutcome_ID, data=df_train_dwnsmpled)
summary.aov(aov_test)
summary(step_model)
library(glmnet) #for LASSO
str(full_model_train)
x=model.matrix(clnt.subcr_ID~.,full_model_train[, -10])[,-1]
y=full_model_train$clnt.subcr_ID
xtest<-model.matrix(clnt.subcr_ID~.~.,full_model_test~.)[,-1]
xtest<-model.matrix(clnt.subcr_ID~.,full_model_test~.)[,-1]
xtest<-model.matrix(clnt.subcr_ID~.,full_model_test)[,-1]
ytest<-full_model_test$clnt.subcr_ID
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(x,y,alpha=1, lambda =grid)
cv.out=cv.glmnet(x,y,alpha=1) #alpha=1 performs LASSO
plot(cv.out)
bestlambda<-cv.out$lambda.min  #Optimal penalty parameter.  You can make this call visually.
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
table(x)
dim(x)
dim(y)
full_model_train$clnt.subcr_ID
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
bestlambda<-cv.out$lambda.min  #Optimal penalty parameter.  You can make this call visually.
bestlambda
plot(cv.out)
lasso.mod=glmnet(x,y,alpha=1, lambda =grid)
bestlambda<-cv.out$lambda.min  #Optimal penalty parameter.  You can make this call visually.
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
bestlambda
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
xtest
str(xtest)
str(full_model_train)
exclude_columns_EDA <- c(1,3,5,7,8,9,11,12,13,15,17,18,19,21,34)
full_model_train <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model_test <- df_test_dwnsmpled[, -exclude_columns_EDA]
str(full_model_train)
x=model.matrix(clnt.subcr_ID~.,full_model_train[, -10])[,-1]
y=full_model_train$clnt.subcr_ID
xtest<-model.matrix(clnt.subcr_ID~.,full_model_test)[,-1]
ytest<-full_model_test$clnt.subcr_ID
grid=10^seq(10,-2, length =100)
lasso.mod=glmnet(x,y,alpha=1, lambda =grid)
cv.out=cv.glmnet(x,y,alpha=1) #alpha=1 performs LASSO
plot(cv.out)
bestlambda<-cv.out$lambda.min  #Optimal penalty parameter.  You can make this call visually.
bestlambda
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
lasso.pred=predict (lasso.mod ,s=bestlambda ,newx=xtest)
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step_model)
# Logistic Regression Model
library(glmnet)
summary(df_num_only)
# df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, y=emp.var.rate, fill=clnt.subcr_desc)) + geom_point() +geom_smooth(method="lm")
df_train_dwnsmpled %>% ggplot(aes(x=nr.employed, fill=clnt.subcr_desc)) + geom_histogram()
# distributino of eurobor3m
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_density()
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_density() + labs(title="Distribution of eurobor3m (Int Rate)")
train_pi <- predict(logit_model, interval="predict")
library(glmnet)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_train[, -9])
exclude_columns_EDA <- c(1,3,5,7,8,9,11,12,13,15,17,18,19,21,34)
# removing the EDA based attributes to both the downsampled test and train set
full_model_train <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model_test <- df_test_dwnsmpled[, -exclude_columns_EDA]
full_model <- lm(clnt.subcr_ID~., data=full_model_train[, -10])
bck_model <- stepAIC(full_model, direction="backward", trace=FALSE)
summary(bck_model)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_train[, -9])
str(full_model_train)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_train[, -8])
summary(logit_model)
logit_pred <- predict(logit_model, newdata=full_model_test, type="response")
cutoff <- .5
cutoff <- .5
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
plot(logit_model,main="train")
par(mfrow=c(2,2))
plot(logit_model,main="train")
par(mfrow=c(3,3))
plot(logit_model,main="train")
par(mfrow=c(2,2))
plot(logit_model,main="train")
par(mfrow=c(2,2))
plot(logit_model,main="Residual Diagnostics on Training Set Predictions")
par(mfrow=c(2,2))
plot(logit_model,main="Residual Diagnostics")
confint(logit_model)
logit_model$coefficients
exp(logit_model$coefficients)
results_logit_pred <- prediction(logit_pred, full_model_test$clnt.subcr_desc, label.ordering=c("yes","no"))
library(ROCR)
results_logit_pred <- prediction(logit_pred, full_model_test$clnt.subcr_desc, label.ordering=c("yes","no"))
featureselect_ROC <- performance(results_logit_pred, measure="tpr", x.measure="fpr")
plot(featureselect_ROC, colorize=TRUE)
abline(a=0, b=1)
residual_diag_par <- par(mfrow=c(2,2))
plot(logit_model,main="Residual Diagnostics")
par(residual_diag_par)
plot(featureselect_ROC, colorize=TRUE)
logit_model
library(Rmisc)
install.packages("Rmisc")
library(Rmisc)
logit_pred.class
str(logit_pred.class)
confint(logit_model)
logit_pred$fit
logit_pred <- predict(logit_model, newdata=full_model_test, type="response")
logit_pred$fit
logit_pred <- predict(logit_model, newdata=full_model_test, type="response", se.fit = TRUE)
cutoff <- .5
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred <- predict(logit_model, newdata=full_model_test, type="response")
cutoff <- .5
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
confint(logit_pred)
logit_pred <- predict(logit_model, newdata=full_model_test, type="response")
confint(logit_model)
summary(logit_model)
logit_pred <- predict(logit_model, newdata=full_model_test, type="response", interval="confidence")
logit_pred
summary(logit_pred)
results_logit_pred <- prediction(logit_pred, full_model_test$clnt.subcr_desc, label.ordering=c("no","yes"))
featureselect_ROC <- performance(results_logit_pred, measure="tpr", x.measure="fpr")
plot(featureselect_ROC, colorize=TRUE)
abline(a=0, b=1)
exp(coef(logit_model))
coef(logit_model)
logit_model$coefficients$job_ID
str(logit_model$coefficients)
str(logit_model$coefficients[2]
)
logit_model$coefficients[2]
logit_model$coefficients[2]*10
logit_pred$coefficients[1]
mogit_model$coefficients[1]
logit_model$coefficients[1]
logit_model$coefficients[19]
b17 <- logit_model$coefficients[18]
logit_model$coefficients[18]
logit_model$coefficients
b0 <- logit_model$coefficients[1]
b1 <- logit_model$coefficients[2]
b2 <- logit_model$coefficients[3]
b3 <- logit_model$coefficients[4]
b4 <- logit_model$coefficients[5]
b5 <- logit_model$coefficients[6]
b6 <- logit_model$coefficients[7]
b7 <- logit_model$coefficients[8]
b8 <- logit_model$coefficients[9]
b9 <- logit_model$coefficients[10]
b10 <- logit_model$coefficients[11]
b11 <- logit_model$coefficients[12]
b12 <- logit_model$coefficients[13]
b13 <- logit_model$coefficients[14]
b14 <- logit_model$coefficients[15]
b15 <- logit_model$coefficients[16]
b16 <- logit_model$coefficients[17]
b17 <- logit_model$coefficients[18]
b18 <- logit_model$coefficients[19]
exp(cbind("Odds ratio" = coef(logit_model), confint.default(logit_model, level = 0.95)))
confint(logit_model)
exp(cbind("Odds ratio" = coef(logit_model), confint.default(logit_model, level = 0.95)))
table(logit_pred)
confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix <- confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix
logit_confusionmatrix$table
table(logit_pred, full_model_test$clnt.subcr_desc)
summary(logit_model)
forward_min <- lm(clnt.subcr_ID~ 1, data=full_model_train[, -2])
class_fwd_model <- step(forward_min, scope=list(lower=forward_min, upper=full_model), direction="forward")
full_model_train[, -2]
str(full_model_train[, -2])
forward_min <- lm(clnt.subcr_ID~ 1, data=full_model_train[, -10])
class_fwd_model <- step(forward_min, scope=list(lower=forward_min, upper=full_model), direction="forward")
str(full_model_train)
str(df_train_dwnsmpled)
exclude_columns_EDA <- c(1,3,5,7,8,9,11,12,13,15,17,18,19,21,34)
# removing the EDA based attributes to both the downsampled test and train set
full_model_train <- df_train_dwnsmpled[, -exclude_columns_EDA]
full_model_test <- df_test_dwnsmpled[, -exclude_columns_EDA]
str(full_model_train)
ncol(full_model_train)
ncol(full_model_test)
full_model <- lm(clnt.subcr_ID~., data=full_model_train[, -9])
step_model <- stepAIC(full_model, direction="both", trace=FALSE)
summary(step_model)
forward_min <- lm(clnt.subcr_ID~ 1, data=full_model_train[, -9])
class_fwd_model <- step(forward_min, scope=list(lower=forward_min, upper=full_model), direction="forward")
summary(class_fwd_model)
bck_model <- stepAIC(full_model, direction="backward", trace=FALSE)
summary(bck_model)
summary(class_fwd_model)
summary(class_fwd_model)
summary(step_model)
fwd_model_vars <- c(1,3,5,6,7,10,11,13,15,16,18,19)
fwd_model_vars <- c(1,3,5,6,7,10,11,13,15,17,18,19)
bck_model_vars <- c(1,3,5,6,7,10,11,13,15,16,17,18,19)
logit_model <- glm(clnt.subcr_desc~., family="binomial", data=full_model_train[, -8])
summary(logit_model)
logit_model
logit_model
fwd_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,18,19)
fwd_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,17,18,19)
bck_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,17,18,19)
reduced_bkp_model <- full_model_train[,bck_model_vars]
str(reduced_bkp_model)
fwd_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,18,19)
reduced_fwd_model <- full_model_train[,fwd_model_vars]
str(reduced_fwd_model)
stp_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,18,19)
reduced_stp_model <- full_model_train[,fwd_model_vars]
stp_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,18,19)
reduced_stp_model <- full_model_train[,stp_model_vars]
fwd_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,17,18,19)
fwd_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,17,18,19)
reduced_fwd_model <- full_model_train[,fwd_model_vars]
str(reduced_fwd_model)
stp_model_vars <- c(1,3,5,6,7,8,9,10,11,13,15,16,18,19)
reduced_stp_model <- full_model_train[,stp_model_vars]
str(reduced_str_model)
reduced_stp_model <- full_model_train[,stp_model_vars]
str(reduced_stp_model)
str(reduced_stp_model)
str(reduced_fwd_model)
logit_model_fwd <- glm(clnt.subcr_desc~., family="binomial", data=reduced_fwd_model[, -7])
logit_model_fwd <- glm(clnt.subcr_desc~., family="binomial", data=reduced_fwd_model[, -8])
logit_model_fwd <- glm(clnt.subcr_desc~., family="binomial", data=reduced_fwd_model[, -8])
logit_model_fwd
logit_model_fwd <- glm(clnt.subcr_desc~., family="binomial", data=reduced_fwd_model[, -6])
logit_model_bck <- glm(clnt.subcr_desc~., family="binomial", data=reduced_bkp_model[, -6])
logit_model_stp <- glm(clnt.subcr_desc~., family="binomial", data=reduced_stp_model[, -6])
logit_model_fwd$aic
logit_model_bck$aic
logit_model_stp$aic
logit_model$aic
ncol(logit_model)
logit_pred_fwd <- predict(logit_model_fwd, newdata=full_model_test, type="response", interval="confidence")
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_fwd.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_bkp.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_stp.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
cutoff <- .5
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_fwd.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_bkp.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_stp.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_confusionmatrix <- confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_fwd <- confusionMatrix(logit_pred_fwd.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_bkp <- confusionMatrix(logit_pred_bkp.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_stp <- confusionMatrix(logit_pred_stp.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_fwd$aic
logit_confusionmatrix_fwd
logit_confusionmatrix_fwd$byClass$Accuracy
logit_confusionmatrix_fwd$byClass[1]
logit_confusionmatrix_fwd$byClass[0]
logit_confusionmatrix_fwd$overall
logit_confusionmatrix_fwd$overall[1]
logit_confusionmatrix$overall[1]
logit_confusionmatrix_fwd$overall[1]
logit_confusionmatrix_bkp$overall[1]
logit_confusionmatrix_stp$overall[1]
logit_pred.class <- factor(ifelse(logit_pred>cutoff, "yes", "no"))
logit_pred_fwd.class <- factor(ifelse(logit_pred_fwd>cutoff, "yes", "no"))
logit_pred_bkp.class <- factor(ifelse(logit_pred_bck>cutoff, "yes", "no"))
logit_pred_fwd <- predict(logit_model_fwd, newdata=full_model_test, type="response", interval="confidence")
logit_pred_bck <- predict(logit_model_bck, newdata=full_model_test, type="response", interval="confidence")
logit_pred_stp <- predict(logit_model_stp, newdata=full_model_test, type="response", interval="confidence")
logit_pred_fwd.class <- factor(ifelse(logit_pred_fwd>cutoff, "yes", "no"))
logit_pred_bkp.class <- factor(ifelse(logit_pred_bck>cutoff, "yes", "no"))
logit_pred_stp.class <- factor(ifelse(logit_pred_stp>cutoff, "yes", "no"))
logit_confusionmatrix <- confusionMatrix(logit_pred.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_fwd <- confusionMatrix(logit_pred_fwd.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_bkp <- confusionMatrix(logit_pred_bkp.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix_stp <- confusionMatrix(logit_pred_stp.class, as.factor(full_model_test$clnt.subcr_desc))
logit_confusionmatrix$overall[1]
logit_confusionmatrix_fwd$overall[1]
logit_confusionmatrix_bkp$overall[1]
logit_confusionmatrix_stp$overall[1]
logit_confusionmatrix''
logit_confusionmatrix
residual_diag_par <- par(mfrow=c(2,2))
plot(logit_confusionmatrix_fwd,main="Residual Diagnostics")
par(residual_diag_par)
residual_diag_par <- par(mfrow=c(2,2))
plot(logit_pred_fwd.class,main="Residual Diagnostics")
par(residual_diag_par)
residual_diag_par <- par(mfrow=c(2,2))
plot(logit_pred_fwd,main="Residual Diagnostics")
par(residual_diag_par)
# Residual Diagnostics
residual_diag_par <- par(mfrow=c(2,2))
plot(logit_model_fwd,main="Residual Diagnostics")
par(residual_diag_par)
summary(logit_model_fwd)
logit_confusionmatrix_fwd
confint(logit_model)
confint(logit_model_fwd)
coef(logit_model_fwd)
logit_confusionmatrix_fwd
exp(cbind("Odds ratio" = coef(logit_model), confint.default(logit_model, level = 0.95)))
coef(logit_model_fwd)
coef(logit_model_fwd[1])
coef(logit_model_fwd[,1])
logit_model_fwd[1]
summary(logit_model_fwd)
summary(logit_model_fwd$coefficients[1])
logit_model_fwd$coefficients[1]
nrow(logit_model_fwd)
nrow(logit_model_fwd$coefficients)
for(i in 1:12){}
logit_model_fwd$coefficients[i]
}
for(i in 1:12){
logit_model_fwd$coefficients[i]
}
for(i in 1:12){
print logit_model_fwd$coefficients[i]
}
for(i in 1:12){
x[i] <- logit_model_fwd$coefficients[i]
}
x
x[1]
for(i in 1:12){
logit_model_fwd$coefficients[i]
print()
}
logit_model_fwd$coefficients[2]
for(i in 1:12){
n <- logit_model_fwd$coefficients[2]
test$column[i] <- n
}
for(i in 1:12){
n[i] <- logit_model_fwd$coefficients[2]
}
n
for(i in 1:12){
n[i] <- logit_model_fwd$coefficients[i]
}
n
logit_model_fwd$coefficients[1]
logit_model_fwd$coefficients[2]
logit_model_fwd$coefficients[3]
logit_model_fwd$coefficients[4]
logit_model_fwd$coefficients[5]
logit_model_fwd$coefficients[6]
logit_model_fwd$coefficients[7]
logit_model_fwd$coefficients[8]
logit_model_fwd$coefficients[9]
logit_model_fwd$coefficients[10]
for(i in 1:12){
print(logit_model_fwd$coefficients[i])
}
summary(logit_model_fwd)
for(i in 1:12){
print(logit_model_fwd$coefficients[i])
}
print(summarylogit_model_fwd,digits=10)
print(summary(logit_model_fwd),digits=10)
print(summary(logit_model_fwd),digits=20)
options(scipen = 999)
summary(logit_model_fwd)
logit_model_fwd$coefficients
odds.ratio(logit_model_fwd)
oddsratio.wald(logit_model_fwd)
library(epitools)
oddsratio.wald(logit_model_fwd)
odds.ratio(logit_model_fwd)
library(fmsb)
oddsratio.wald(logit_model_fwd)
oddsratio.wald(logit_pred_fwd.class)
exp(cbind("Odds ratio" = coef(logit_model_fwd), confint.default(logit_model_fwd, level = 0.95)))
options(scipen = 100)
exp(cbind("Odds ratio" = coef(logit_model_fwd), confint.default(logit_model_fwd, level = 0.95)))
options(scipen = 100)
exp(cbind("Odds ratio" = coef(logit_model_fwd), confint.default(logit_model_fwd, level = 0.95)))
options(scipen = -100)
exp(cbind("Odds ratio" = coef(logit_model_fwd), confint.default(logit_model_fwd, level = 0.95)))
# creating correlation matrix  of numerical datatypes
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
corr_matrix_num <- df_train_dwnsmpled[,c(24:33)]
M <- cor(corr_matrix_num, use="pairwise.complete.obs")
corrplot(M, method = "number", order = "alphabet",number.cex=0.5)
# distributino of eurobor3m
df_train_dwnsmpled %>% ggplot(aes(x=euribor3m, fill=clnt.subcr_desc)) + geom_density() + labs(title="Distribution of eurobor3m (Int Rate)")
